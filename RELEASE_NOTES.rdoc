= Release Notes

== Version 2.1.2

* Fixed that redis key GC would never complete when a key scheduled
  for GC was deleted by a consumer before the collector could retrieve
  its expiry date.
* Fixed tha redis key GC would crash on malformed keys.
* Added method to collect keys specified in a file.


== Version 2.1.1

* Support redis failover with less than 100% acknowlegment from failover clients.

== Version 2.1.0

* Support exponential backoff when delaying messages using 'max_delay: int' option.

== Version 2.0.2

* fixed incorrect computation of responsiveness threshold in
  configuration server

== Version 2.0.1

* fix for beetle command not geting stuck when connecting to
  configuration server
* configuration server displays last seen times in a human readable format

== Version 2.0.0

* beetle command has been rewritten in Go
* garbage collecting redis keys now uses the redis SCAN command

== Version 1.0.4

* use amqp protocol version 0.9 by default for publishers

== Version 1.0.3

* fixed that publisher did not allow specifying message properties

== Version 1.0.2

* relax hiredis requirements to >= 0.4.5

== Version 1.0.1

* don't try to connect on publisher shutdown

== Version 1.0.0

* introduced semantic versioning
* upgraded gems used for devloping beetle
* upgraded amqp gem to version 1.6.0 and amq-protocol to 2.0.1
* relaxed requirements on redis and hiredis versions
* support setting prefetch count for subscriber

== Version 0.4.12

* Don't log warnings when publishing redundantly and only
  one server has been configured

== Version 0.4.11

* Automatically close open publisher sockets at program exit

== Version 0.4.10

* Publisher handles nil and symbols as values in headers correctly

== Version 0.4.9

* Allow redis_configuration_client to run in the foreground (useful
  for docker)

== Version 0.4.8

* unseen clients need to be an array

== Version 0.4.7

* list clients which have never sent a ping in the failover server UI

== Version 0.4.6

* Publish activesupport notifications to support performance measurements

== Version 0.4.5

* Starting mutliple redis failover clients is now prohibited by
  default. This behavior can be overriden using
  "beetle configuration_client start -- --multiple"

== Version 0.4.4

* added command to show beetle version: "beetle --version"
* configuration server tracks ids of unknown clients
* configuration clients now sends heartbeats
* configuration server tracks last seen times of clients, based on heartbeat

== Version 0.4.3

* fixed a race condition which could lead to duplicate message processing
* fixed eventmachine shutdown sequence problem, which led to ACKs
  occasionally being lost due to writing to a closed socket, which in
  turn caused messages to be processed twice
* stop_listening now always triggers the subscribe shutdown sequence
  via a eventmachine timer callback, if the eventmachine reactor is running

== Version 0.4.2

* Fail hard on missing master file
* Set message timestamp header

== Version 0.4.1

* Require newer bunny version (0.7.10) to fix publishing of messages larger than frame_max

== Version 0.4.0

* Added optional dead lettering feature to mimic RabbitMQ 2.x requeueing behaviour on RabbitMQ 3.x

== Version 0.3.14

* switched message id generation to use v4 uuids

== Version 0.3.0

* redis master file contents now correctly reflects the state of the running configuration server
* allow accelerating master switch via POST to redis configuration server
* embedded http server into the redis configuration server (port 8080)
* fixed a problem with redis shutdown command
* upgraded to redis 2.2.2
* upgraded to amqp gem version 0.8 line
* use hiredis as the redis backend, which overcomes lack of proper time-outs in the "generic" redis-rb
  gem for Ruby 1.9
* use fully qualified hostnames to identify redis configuration clients

== Version 0.2.9.8

* since version 2.0, RabbitMQ supports Basic.reject(:requeue => true). we use it now too,
  because it enhances performance of message processors. this means of course, you can
  only use beetle gem versions >= 0.2.9.8 if your rabbitmq brokers are at least version 2.0.
* publishing timeout defaults to 0 to avoid extreme message loss in some cases


== Version 0.2.9.7

* use new bunny_ext gem and allow specification of global publishing timeouts
* registering a message now automatically registers the corresponding exchange
* don't try to bind queues for an exchange hich has no queue
* ruby 1.9.2 compatibility fixes

== Version 0.2.9

* Beetle::Client now raises an exception when it fails to publish a message to at least 1 RabbitMQ server
* Subscribers are now stopped cleanly to avoid 'closed abruptly' messages in the RabbitMQ server log

== Version 0.2.6

* Set dependency on ActiveSupport to 2.3.x since it ain't compatible to version 3.x yet
* Publishers catch a wider range (all?) of possible exceptions when publishing messages
* Redis Configuration Servers detect and warn when unknown Redis Configuration Clients connect

== Version 0.2.5

Added missing files to gem and rdoc

== Version 0.2.4

Log and send a system notification when pong message from unknown client received.

== Version 0.2.2

Patch release which upgrades to redis-rb 2.0.4. This enables us to drop our redis monkey
patch which enabled connection timeouts for earlier redis versions. Note that earlier
Beetle versions are not compatible with redis 2.0.4.

== Version 0.2.1

Improved error message when no rabbitmq broker is available.

== Version 0.2

This version adds support for automatic redis deduplication store failover (see separate
file REDIS_AUTO_FAILOVER.rdoc).

=== User visible changes

* it's possible to register auto deleted queues and exchanges
* Beetle::Client#configure returns self in order to simplify client setup
* it's possible to trace specific messages (see Beetle::Client#trace)
* default message handler timeout is 10 minutes now
* system wide configuration values can be specified via a yml formatted configuration
  file (Beetle::Configuration#config_file)
* the config value redis_server specifies either a single server or a file path (used
  by the automatic redis failover logic)

=== Fugs Bixed

* handle active_support seconds notation for handler timeouts correctly
* error handler was erroneously called for expired messages
* subscribers would block when some non beetle process posts an undecodable message

=== Gem Dependency Changes

* redis needs to be at least version 2.0.3
* we make use of the SystemTimer gem for ruby 1.8.7

== Version 0.1

Initial Release
